---
title: "MAP"
author: "author"
date: "date"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---


```{python}
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import folium
from folium import Choropleth

# Paths for the files
shapefile_path = "/Users/apple/Desktop/present/Boundaries - Neighborhoods/geo_export_2bead91c-c5c2-49b2-9056-a3cb54131984.shp"
data_path = "/Users/apple/Desktop/present/Neighbourhood Scores - Sheet1.csv"

# Function to detect file encoding
def detect_encoding(file_path):
    import chardet
    with open(file_path, 'rb') as file:
        raw_data = file.read(10000)
        return chardet.detect(raw_data)['encoding']

# Load and clean data with robust encoding handling
def load_and_clean_data(data_path):
    try:
        # Attempt to read with UTF-8
        data = pd.read_csv(data_path, encoding='utf-8')
    except UnicodeDecodeError:
        # Detect encoding and retry
        detected_encoding = detect_encoding(data_path)
        print(f"Detected Encoding: {detected_encoding}")
        data = pd.read_csv(data_path, encoding=detected_encoding)

    # Clean the data
    data['Neighbourhood'] = data['Neighbourhood'].str.strip().str.lower().str.title()
    data = data.groupby('Neighbourhood', as_index=False).agg({'Overall_Score': 'mean'})
    return data

# Load the shapefile and clean it
def load_shapefile(shapefile_path):
    neighborhoods_shp = gpd.read_file(shapefile_path)
    neighborhoods_shp['pri_neigh'] = neighborhoods_shp['pri_neigh'].str.strip().str.lower().str.title()
    return neighborhoods_shp

# Merge the shapefile with the data
def merge_data(shapefile, data):
    return shapefile.merge(data, left_on='pri_neigh', right_on='Neighbourhood', how='left')

# Static Choropleth Map
def plot_static_map(neighborhoods_data):
    plt.figure(figsize=(10, 10))
    neighborhoods_data.plot(column='Overall_Score', cmap='RdYlGn', legend=True,
                            missing_kwds={"color": "lightgrey", "label": "Missing values"})
    plt.title("Chicago Overall Neighbourhood Map (AARP Indicators)", fontsize=16)
    plt.axis('off')
    plt.show()

# Interactive Map
def create_interactive_map(neighborhoods_data):
    # Convert GeoDataFrame to GeoJSON for Folium
    neighborhoods_data = neighborhoods_data.to_crs(epsg=4326)  # Convert CRS to WGS84 for Folium
    geojson_data = neighborhoods_data.to_json()

    # Initialize the Folium map
    m = folium.Map(location=[41.8781, -87.6298], zoom_start=11)

    # Add a choropleth layer
    Choropleth(
        geo_data=geojson_data,
        data=neighborhoods_data,
        columns=['pri_neigh', 'Overall_Score'],
        key_on='feature.properties.pri_neigh',
        fill_color='RdYlGn',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name='Overall Score'
    ).add_to(m)

    # Add mouseover tooltips for interactivity
    folium.GeoJson(
        geojson_data,
        style_function=lambda feature: {
            'fillColor': 'transparent',
            'color': 'black',
            'weight': 0.5
        },
        tooltip=folium.features.GeoJsonTooltip(
            fields=['pri_neigh', 'Overall_Score'],
            aliases=['Neighborhood:', 'Score:'],
            localize=True
        )
    ).add_to(m)

    return m

# Main execution
if __name__ == "__main__":
    # Load and clean data
    data = load_and_clean_data(data_path)
    neighborhoods_shp = load_shapefile(shapefile_path)
    neighborhoods_data = merge_data(neighborhoods_shp, data)

    # Plot static map
    plot_static_map(neighborhoods_data)

    # Create and save interactive map
    interactive_map = create_interactive_map(neighborhoods_data)
    interactive_map.save("chicago_neighborhood_map.html")
    print("Interactive map saved as 'chicago_neighborhood_map.html'")

```


